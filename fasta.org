#+begin_src latex
  \newpage
  \section{Introduction}
  The FASTA file format is widely used in molecular biology for storing
  nucleotide and protein sequences. As an example, Figure~\ref{fig:fas}
  shows the first five lines of the genomes of two \emph{Escherichia
    coli} strains. \emph{E. coli} is a bacterium that lives in the guts
  of warm-blooded animals, including our own. Each sequence consists of
  a header line starting with a \verb+>+. There are no generally
  accepted rules as to what might follow, but each of our example
  headers contains a GenBank accession number, followed by the organism,
  and the strain. The header is followed by the actual sequence data in
  lines 70 residues long. A line length of 70 is a convention often
  flouted, some FASTA files have shorter lines, others all data of an
  entry in a single line.

  This data can be very long. The genome of our first example strain
  EDL933 consists of 5,528,445 nucleotides in 78,978 lines. Similarly,
  the genome of the second example strain, CFT073, has 5,231,428
  nucleotides in 74,735 lines. Still, \emph{E. coli} genomes are tiny
  compared to our three billion nucleotides. Efficiency is thus
  important when designing a package for dealing with sequence data.


  \begin{figure}
  \begin{verbatim}
  >AE005174.2 Escherichia coli O157:H7 str. EDL933 genome
  AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTCTCTGACAGCAGC
  TTCTGAACTGGTTACCTGCCGTGAGTAAATTAAAATTTTATTGACTTAGGTCACTAAATACTTTAACCAA
  TATAGGCATAGCGCACAGACAGATAAAAATTACAGAGTACACAACATCCATGAAACGCATTAGCACCACC
  ATTACCACCACCATCACCACCACCATCACCATTACCATTACCACAGGTAACGGTGCGGGCTGACGCGTAC
  ...
  \end{verbatim}
  \begin{verbatim}
  >AE014075.1 Escherichia coli CFT073, complete genome
  AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC
  TTCTGAACTGGTTACCTGCCGTGAGTAAATTAAAATTTTATTGACTTAGGTCACTAAATACTTTAACCAA
  TATAGGCATAGCGCACAGACAGATAAAAATTACAGAGTACACAACATCCATGAAACGCATTAGCACCACC
  ATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGACGCGTACAGGAAACACAGAAAAAAG
  ...
  \end{verbatim}
  \caption{Example FASTA file of two \emph{E. coli} genomes.}\label{fig:fas}
  \end{figure}

  !Package \texttt{fasta} implements data structures and functions for
  !reading, writing, and manipulating sequences in FASTA format.
#+end_src
#+begin_src go <<fasta.go>>=
  package fasta
  import (
	  //<<Imports>>
  )
  const (
	  //<<Constants>>
  )
  //<<Variables>>
  //<<Data structures>>
  //<<Methods>>
  //<<Functions>>
#+end_src
#+begin_src latex
  The package is centered on two data structures, \texttt{Sequence} for
  storing a sequence, and \texttt{Scanner} for parsing data.
  \section{Structure \texttt{Sequence}}
  !\texttt{Sequence} holds a nucleotide or protein sequence.
  It consists of a header and the actual sequence data.
  A sequence is printed with data lines of length \texttt{lineLength} or
  less.
#+end_src
#+begin_src go <<Data structures>>=
  type Sequence struct {
	  header string
	  data []byte
	  lineLength int
  }
#+end_src
#+begin_src latex
  \subsection{Getters and Setters}
  The three fields of \texttt{Sequence} come with getters.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) Header() string { return s.header }
  func (s *Sequence) Data() []byte   { return s.data }
  func (s *Sequence) LineLength() int { return s.lineLength }
#+end_src
#+begin_src latex
  For \ty{header}, \ty{data}, and \texttt{lineLength} there are also
  setters. We begin with the header.
  !\ty{SetHeader} replaces the existing header.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) SetHeader(h string) {
	  s.header = h
  }
#+end_src
#+begin_src latex
  !\ty{SetData} replaces the existing data.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) SetData(d []byte) {
	  s.data = d
  }
#+end_src
#+begin_src latex
  !\ty{SetLineLength} replaces the current line length. If the line
  !length passed is less than 1, it is assumed that effectively infinite
  !lines are requested.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) SetLineLength(l int) {
	  s.lineLength = l
	  if s.lineLength < 1 {
		  s.lineLength = math.MaxInt64
	  }
  }
#+end_src
#+begin_src latex
  We import \texttt{math}.
#+end_src
#+begin_src go <<Imports>>=
  "math"
#+end_src
#+begin_src latex
  !\texttt{AppendToHeader} appends the suffix suf to the header.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) AppendToHeader(suf string) {
	  s.header = s.header + suf
  }
#+end_src
#+begin_src latex
  \subsection{Function \texttt{NewSequence}}
  !Function NewSequence returns a new Sequence.
  It takes as argument a
  header and sequence data. The sequence data is copied using the
  built-in function \texttt{copy} to make it as fast as possible. \texttt{NewSequence}
  also initializes \texttt{lineLength} to its default value.
#+end_src
#+begin_src go <<Functions>>=
  func NewSequence(h string, d []byte) *Sequence {
	  s := new(Sequence)
	  s.header = h
	  s.data = make([]byte, len(d))
	  copy(s.data, d)
	  s.lineLength = DefaultLineLength
	  return s
  }
#+end_src
#+begin_src latex
  The default line length is a constant we set to the widely used value
  of 70.
#+end_src
#+begin_src go <<Constants>>=
DefaultLineLength = 70
#+end_src
#+begin_src latex
  \subsection{Method \texttt{Equals}}
  !\texttt{Equals} compares two sequences and returns true if their
  !headers and data are identical.
  The field \texttt{lineLength} is not compared, as this is not an
  essential aspect of the \texttt{Sequence}.
#+end_src
#+begin_src go <<Methods>>=
  func (a *Sequence) Equals(b *Sequence) bool {
	  //<<Test \texttt{header}>>
	  //<<Test \texttt{data}>>
	  return true
  }
#+end_src
#+begin_src latex
  Strings are comparable.
#+end_src
#+begin_src go <<Test \texttt{header}>>=
  if a.header != b.header {
	  return false
  }
#+end_src
#+begin_src latex
  \texttt{data} is a byte slice, which can only be compared
  byte-wise. But before we go to that trouble, we check that the slices
  are the same length.
#+end_src
#+begin_src go <<Test \texttt{data}>>=
  if len(a.data) != len(b.data) {
	  return false
  }
  return bytes.Equal(a.data, b.data)
#+end_src
#+begin_src latex
  We import \texttt{bytes}.
#+end_src
#+begin_src go <<Imports>>=
  "bytes"
#+end_src
#+begin_src latex
  \subsection{Method \texttt{String}}
  Writing a \texttt{Sequence} is delegated to its \texttt{String} method.
  !\texttt{String} wraps the sequence into lines at most \texttt{lineLength} characters long.
  We construct the final string from an intermediate byte slice, into
  which we copy the header and the data. The data is
  interspersed with newlines. If this results in a terminal
  newline, it's removed. Finally, we return the new string.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) String() string {
	  var b []byte
	  //<<Store header>>
	  //<<Store data>>
	  //<<Remove terminal newline>>
	  //<<Return string>>
  }
#+end_src
#+begin_src latex
  If present, the header is stored and terminated by a newline. The
  header might be empty.
#+end_src
#+begin_src go <<Store header>>=
  b = append(b, '>')
  b = append(b, s.header...)
  b = append(b, '\n')
#+end_src
#+begin_src latex
  The data is copied byte-wise and decorated with newlines.
#+end_src
#+begin_src go <<Store data>>=
  var c int
  for _, r := range s.data {
	  b = append(b, r)
	  c++
	  if c == s.lineLength {
		  c = 0
		  b = append(b, '\n')
	  }
  }
#+end_src
#+begin_src latex
  If we have just added a terminal newline, this gets removed again.
#+end_src
#+begin_src go <<Remove terminal newline>>=
  if c == 0  && len(b) > 0 {
	  b = b[:len(b)-1]
  }
#+end_src
#+begin_src latex
  When returning the final string, we make sure the buffer, \texttt{b},
  actually contains some data. If not, we return the empty string.
#+end_src
#+begin_src go <<Return string>>=
  if len(b) > 0 {
	  return string(b)
  } else {
	  return ""
  }
#+end_src
#+begin_src latex 
  \subsection{Method \texttt{Shuffle}}\label{sec:rev}
  !Method \texttt{Shuffle} randomizes the residues in a
  !\texttt{Sequence}. The sequence composition remains unchanged.
  We implement this using the \texttt{Shuffle} method of
  \texttt{math/rand}, as shown in the golang documentation.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) Shuffle(r *rand.Rand) {
	  d := s.data
	  r.Shuffle(len(d), func(i, j int) {
		  d[i], d[j] = d[j], d[i]
	  })
  }
#+end_src
#+begin_src latex
  We import \texttt{math/rand}.
#+end_src
#+begin_src go <<Imports>>=
  "math/rand"
#+end_src
#+begin_src latex
  \subsection{Method \texttt{Reverse}}
  !Method \texttt{Reverse} reverses the residues of a
  !\texttt{Sequence}.
  We implement it using the code shown in \cite[p. 86]{don16:go}.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) Reverse() {
	  d := s.data
	  for i, j := 0, len(d)-1; i < j; i, j = i+1, j-1 {
		  d[i], d[j] = d[j], d[i]
	  }
  }
#+end_src
#+begin_src latex
  \subsection{Method \texttt{Complement}}
  !\texttt{Complement} complements nucleotide sequences.
  In other words, \texttt{ACGTU} is turned into \texttt{TGCAT}. In
  addition, we consider the ambiguous nucleotides listed in Table~\ref{tab:amb}.
    \begin{table}[ht]
      \caption{Ambiguity codes for nucleotides}\label{tab:amb}
      \begin{center}
	\begin{tabular}{clc}
	  \hline
	  Symbol & Meaning & Complement\\\hline
	  \texttt{B} & \texttt{[\^{ }A]} & \ty{V}\\
	  \texttt{D} & \texttt{[\^{ }C]} & \ty{H}\\
	  \texttt{H} & \texttt{[\^{ }G]} & \ty{D}\\
	  \texttt{K} & \texttt{[GTU]} & \ty{M}\\
	  \texttt{M} & \texttt{[AC]} & \ty{K}\\
	  \texttt{N} & \texttt{[ACGTU]} & \ty{N}\\
	  \texttt{R} & \texttt{[AG]} & \ty{Y}\\
	  \texttt{S} & \texttt{[CG]} & \ty{S}\\
	  \texttt{V} & \texttt{[\^{ }TU]} & \ty{B}\\
	  \texttt{W} & \texttt{[ATU]} & \ty{W}\\
	  \texttt{Y} & \texttt{[CTU]} & \ty{R}\\\hline
	\end{tabular}
      \end{center}
    \end{table}
    This means a nucleotide sequence may contain the following characters,
    \begin{center}
      \texttt{ACGTUWSMKRYBDHVN},
    \end{center}
    which are complemented as
    \begin{center}
      \texttt{TGCAAWSKMYRVHDBN}.
    \end{center}
    Nucleotides may be denoted in caps or lower case.

    We begin our implementation by constructing a
    nucleotide dictionary, which we then apply in the
    complementation. We construct the dictionary only for the first call
    to \ty{Complement}.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) Complement() {
	  if dic == nil {
		  //<<Construct dictionary>>
	  }
	  //<<Construct complement>>
  }
#+end_src
#+begin_export latex
We declare the global dictionary variable.
#+end_export
#+begin_src go <<Variables>>=
  var dic []byte
#+end_src
#+begin_src latex
  The dictionary consists of all $2^8=256$ bytes. Only nucleotides are
  changed.
#+end_src
#+begin_src go <<Construct dictionary>>=
  dic = make([]byte, 256)
  f := []byte("ACGTUWSMKRYBDHVNacgtuwsmkrybdhvn")
  r := []byte("TGCAAWSKMYRVHDBNtgcaawskmyrvhdbn")
  for i, _ := range dic {
	  dic[i] = byte(i)
  }
  for i, v := range f {
	  dic[v] = r[i]
  }
#+end_src
#+begin_src latex
  Now we use the dictionary to complement the sequence.
#+end_src
#+begin_src go <<Construct complement>>=
  for i, v := range s.data {
	  s.data[i] = dic[v]
  }
#+end_src
#+begin_src latex
  \subsection{Method \texttt{ReverseComplement}}
  !\texttt{ReverseComplement} reverse-complements a \texttt{Sequence}.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Sequence) ReverseComplement() {
	  s.Reverse()
	  s.Complement()
  }
#+end_src
#+begin_export latex
  \subsection{Method \texttt{Length}}
  !Method \texttt{Length} returns the number of residues in
  !\texttt{Sequence}.
#+end_export
#+begin_src go <<Methods>>=
  func (s *Sequence) Length() int {
	  return len(s.data)
  }
#+end_src
#+begin_export latex
  \subsection{Method \texttt{GC}}
  !Method \texttt{GC} returns the fraction of \texttt{GC} nucleotides in
  !\texttt{Sequence}.
#+end_export
#+begin_src go <<Methods>>=
  func (s *Sequence) GC() float64 {
	  l := float64(s.Length())
	  gc := 0.0
	  for _, r := range s.data {
		  if r == 'G' || r == 'C' {
			  gc++
		  }
	  }
	  return gc/l
  }
#+end_src
#+begin_src latex
  \section{Structure \texttt{Scanner}}
  !A \texttt{Sequence} is read using a \texttt{Scanner}.
  It is modeled on \texttt{bufio.Scanner}, but in contrast to
  \ty{bufio.Scanner}, it can handle lines of any length. To achieve
  this, we wrap a \ty{bufio.Reader} rather than a \ty{bufio.Scanner}. We
  also add a hook for any additional fields we might need later on.
#+end_src
#+begin_src go <<Data structures>>=
  type Scanner struct {
	  r *bufio.Reader
	  //<<Scanner fields>>
  }
#+end_src
#+begin_src latex
  We import \texttt{bufio}.
#+end_src
#+begin_src go <<Imports>>=
  "bufio"
#+end_src
#+begin_src latex
  When parsing a FASTA file, we either read it line by line or sequence
  by sequence. We first deal with lines, then use the result to deal
  with sequences.
  \subsection{Method \texttt{ScanLine}}
  !\texttt{ScanLine} reads input line by line. It skips empty lines and
  !marks headers. The last call to \ty{ScanLine} should be followed by a
  !call to \ty{Flush} to retrieve any bytes not terminated by newline.

  We record the error returned by \ty{ReadBytes}.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Scanner) ScanLine() bool {
	  var err error
	  s.line, err = s.r.ReadBytes('\n')
	  if err != nil {
		  s.err = err
		  return false
	  }
	  s.line = bytes.TrimRight(s.line, "\r\n")
	  //<<Found header?>>
	  s.err = nil
	  return true
  }
#+end_src
#+begin_src latex
  We add the scanner fields \ty{line} and \ty{err} for holding a line of
  sequence data and the error encountered reading it.
#+end_src
#+begin_src go <<Scanner fields>>=
  line []byte
  err error
#+end_src
#+begin_src latex
  Whenever we find a line that is not empty, we decide whether or not
  it's a header and send a signal by returning \texttt{true}.
#+end_src
#+begin_src go <<Found header?>>=
  if len(s.line) > 0 {
	  if s.line[0] == '>' {
		  s.isHeader = true
	  } else {
		  s.isHeader = false
	  }
	  return true
  }
#+end_src
#+begin_src latex
  We have used the scanner field \texttt{isHeader}
#+end_src
#+begin_src go <<Scanner fields>>=
  isHeader bool
#+end_src
#+begin_src latex
  and write its getter.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Scanner) IsHeader() bool {
	  return s.isHeader
  }
#+end_src
#+begin_src latex
So far, we have only \emph{parsed} a line; we still need a method to
\emph{retrieve} it.
\subsection{Method \texttt{Line}}
!\texttt{Line} returns the last non-empty line scanned.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Scanner) Line() []byte {
	  return s.line
  }
#+end_src
#+begin_src latex
  \subsection{Method \texttt{Flush}}
  ! \texttt{Flush} returns any bytes remaining in the buffer after the
  ! last call to \ty{ScanLine}.

  \ty{Flush} returns the bytes on a line terminated by EOF rather than
  newline.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Scanner) Flush() []byte {
	  var dum []byte
	  if s.err == io.EOF {
		  return s.line
	  }
	  return dum
  }
#+end_src
#+begin_src latex
  \subsection{Method \texttt{ScanSequence}}
  ! \texttt{ScanSequence} reads input \texttt{Sequence} by \texttt{Sequence}.
  For this we take another look at the structure of a FASTA file. As
  sketched in Figure~\ref{fig:fas2}, each entry in a FASTA file begins
  with a header. With one exception, each of these headers not only
  starts the next sequence, it also closes the previous one. The
  exception is the first header, which only opens a sequence. And while most
  sequences are closed by a header, there is one exception to this rule,
  too: The last sequence is closed by the end of file.

  \begin{figure}
    \begin{center}
      \begin{minipage}{3cm}
  \begin{verbatim}
  >First sequence
  data
  >Second sequence
  data
  ...
  >Last sequence
  data
  EndOfFile
  \end{verbatim}
      \end{minipage}
    \end{center}
    \caption{The structure of a FASTA file.}\label{fig:fas2}
  \end{figure}

  Given this structure, we mark the last sequence. This sequence may or
  may not be terminated by a newline. If it isn't terminated by a
  newline, there is still data we need to collect. Having done that, we
  store the current and previous headers.

  Unfortunately, we might not be dealing with a FASTA file after all. We
  decide this right at the end of the scan.
#+end_src
#+begin_src go <<Functions>>=
  func (s *Scanner) ScanSequence() bool {
	  if s.lastSequence {
		  return false
	  }
	  for s.ScanLine() {
		  //<<Scan a sequence>>
	  }
	  s.lastSequence = true
	  //<<Deal with EOF>>
	  s.previousHeader = s.currentHeader
	  //<<Dealing with FASTA file?>>
  }
#+end_src
#+begin_src latex
  We declare the field \texttt{lastSequence}, and the fields for storing
  the current and the previous headers.
#+end_src
#+begin_src go <<Scanner fields>>=
  lastSequence bool
  previousHeader, currentHeader string
#+end_src
#+begin_src latex
  Any line scanned is either a header or data.
#+end_src
#+begin_src go <<Scan a sequence>>=
  if s.isHeader {
	  //<<Deal with header>>
  } else {
	  //<<Deal with data>>
  }
#+end_src
#+begin_src latex
  When dealing with a header, we save it for later use without the
  leading \texttt{>}. If it's not the header of the first sequence, it
  marks the end of a sequence, which we signal by returning
  \texttt{true}.
#+end_src
#+begin_src go <<Deal with header>>=
  s.previousHeader = s.currentHeader
  s.currentHeader = string(s.Line()[1:])
  if s.firstSequence {
	  s.firstSequence = false
  } else {
	  return true
  }
#+end_src
#+begin_src latex
  We declare the variable for marking the first sequence.
#+end_src
#+begin_src go <<Scanner fields>>=
  firstSequence bool
#+end_src
#+begin_src latex
  Lines of data get stored. 
#+end_src
#+begin_src go <<Deal with data>>=
  s.data = append(s.data, s.Line()...)
#+end_src
#+begin_src latex
  The \texttt{data} field is declared.
#+end_src
#+begin_src go <<Scanner fields>>=
  data []byte
#+end_src
#+begin_src latex
  If the last sequence was terminated by EOF rather than newline, we
  append any data that might still be in the buffer.
#+end_src
#+begin_src go <<Deal with EOF>>=
  if s.err == io.EOF {
	  s.data = append(s.data, s.Line()...)
  }
#+end_src
#+begin_src latex
  We still need to decide whether we've been dealing with a FASTA file,
  after all. Yes, if we encountered at least one header.
#+end_src
#+begin_src go <<Dealing with FASTA file?>>=
  if !s.firstSequence {
	  return true
  } else {
	  return false
  }
#+end_src
#+begin_src latex
  A scanned sequence still needs to be retrieved.
  \subsection{Method \texttt{Sequence}}
  !\texttt{Sequence} returns the last \texttt{Sequence} scanned.
  It also sets the line length and resets \texttt{data}.
#+end_src
#+begin_src go <<Methods>>=
  func (s *Scanner) Sequence() *Sequence {
	  seq := &Sequence {
		  header: s.previousHeader,
	  }
	  seq.data = make([]byte, len(s.data))
	  copy(seq.data, s.data)
	  seq.lineLength = DefaultLineLength
	  s.data = s.data[:0]
	  return seq
  }
#+end_src
#+begin_src latex
  \subsection{Function \texttt{NewScanner}}
  !\texttt{NewScanner} returns a new \texttt{Scanner} to read from
  !\texttt{r}.
  The next header it encounters certainly belongs to the first sequence
  in the data stream, which may also be the last, but not
  necessarily. This is decided at the end of the file. We therefore
  leave \texttt{lastSequence} in its default \texttt{false} state at 
  this point.
#+end_src
#+begin_src go <<Functions>>=
  func NewScanner(r io.Reader) *Scanner {
	  rd := bufio.NewReader(r)
	  scanner := Scanner{
		  r: rd,
		  firstSequence: true,
	  }
	  return &scanner
  }
#+end_src
#+begin_src latex
  We have used the \texttt{io} package.
#+end_src
#+begin_src go <<Imports>>=
  "io"
#+end_src
#+begin_export latex
\section{High-level functions}
\subsection{ReadAndConcatenate}
! \texttt{ReadAndConcatenate} reads all sequences from a file and
concatenates their headers and data tnto one \texttt{Sequence} entry.
We declare variables for scanner, last scanned sequence, data (the
nucleotides), and headers. Then we concatenate fasta entries as we
advance in the file. Upon collecting the entries, we close the file,
convert nucleotides to uppercase, create and return the output
\texttt{Sequence}.
#+end_export
#+begin_src go <<Functions>>=
  func ReadAndConcatenate(f *os.File) *Sequence {
	  sc := NewScanner(f)
	  s := sc.Sequence()
	  d := s.Data()
	  h := []byte(s.Header())
	  for sc.ScanSequence() {
		  //<<Concatenate fasta entries>>
	  }
	  f.Close()
	  d = bytes.ToUpper(d)
	  cSeq := NewSequence(string(h), d)
	  return cSeq
  }
#+end_src
#+begin_export latex
We impor \texttt{os}.
#+end_export
#+begin_src go <<Imports>>=
  "os"
#+end_src
#+begin_export latex
We read a sequence and append its data and header to the corresponding
slices.
#+end_export
#+begin_src go <<Concatenate fasta entries>>=
  s = sc.Sequence()
  h = append(h, '|')
  h = append(h, []byte(s.Header())...)
  d = append(d, s.Data()...)
#+end_src
